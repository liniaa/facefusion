# 中国网络环境优化版本
FROM registry.cn-hangzhou.aliyuncs.com/ubuntu/ubuntu:22.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PIP_NO_CACHE_DIR=1

# 设置工作目录
WORKDIR /app

# 配置中国区APT镜像源
RUN sed -i 's@//.*archive.ubuntu.com@//mirrors.tuna.tsinghua.edu.cn@g' /etc/apt/sources.list && \
    sed -i 's@//.*security.ubuntu.com@//mirrors.tuna.tsinghua.edu.cn@g' /etc/apt/sources.list && \
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse" > /etc/apt/sources.list && \
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse" >> /etc/apt/sources.list && \
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse" >> /etc/apt/sources.list && \
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse" >> /etc/apt/sources.list

# 更新包列表并安装系统依赖
RUN apt-get update && apt-get install -y \
    python3.10 \
    python3.10-dev \
    python3.10-venv \
    python3-pip \
    curl \
    wget \
    git \
    ffmpeg \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgstreamer1.0-0 \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    gstreamer1.0-tools \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 创建Python符号链接
RUN ln -sf /usr/bin/python3.10 /usr/bin/python3 && \
    ln -sf /usr/bin/python3.10 /usr/bin/python

# 配置pip使用清华镜像源
RUN mkdir -p ~/.pip && \
    echo "[global]" > ~/.pip/pip.conf && \
    echo "index-url = https://pypi.tuna.tsinghua.edu.cn/simple/" >> ~/.pip/pip.conf && \
    echo "trusted-host = pypi.tuna.tsinghua.edu.cn" >> ~/.pip/pip.conf && \
    echo "timeout = 120" >> ~/.pip/pip.conf

# 升级pip
RUN python3 -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple/

# 先复制依赖文件（利用Docker缓存）
COPY requirements*.txt ./

# 安装基础Python依赖
RUN pip3 install \
    torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu \
    -i https://pypi.tuna.tsinghua.edu.cn/simple/ \
    --no-cache-dir || \
    pip3 install torch torchvision torchaudio \
    -i https://pypi.tuna.tsinghua.edu.cn/simple/ \
    --no-cache-dir

# 安装其他Python依赖
RUN pip3 install -r requirements-docker.txt \
    -i https://pypi.tuna.tsinghua.edu.cn/simple/ \
    --no-cache-dir \
    --timeout 300

# 安装Intel OpenVINO和相关依赖
RUN pip3 install \
    openvino==2023.3.0 \
    onnxruntime-openvino==1.16.3 \
    -i https://pypi.tuna.tsinghua.edu.cn/simple/ \
    --no-cache-dir \
    --timeout 300

# 复制项目文件
COPY . /app/

# 创建必要目录
RUN mkdir -p /app/.assets/models /app/.caches /app/output /app/input

# 设置Intel GPU环境变量
ENV OPENVINO_DEVICE=GPU
ENV INTEL_OPENVINO_DIR=/usr/local/lib/python3.10/dist-packages/openvino
ENV LD_LIBRARY_PATH=/usr/local/lib/python3.10/dist-packages/openvino/libs:$LD_LIBRARY_PATH

# 暴露端口
EXPOSE 7860

# 创建启动脚本
RUN echo '#!/bin/bash\n\
set -e\n\
echo "=== FaceFusion 启动中 ==="\n\
echo "Python版本: $(python3 --version)"\n\
echo "检测Intel GPU支持..."\n\
python3 -c "import openvino as ov; core = ov.Core(); devices = core.available_devices; print(f\"可用设备: {devices}\"); print(\"✓ Intel GPU支持正常\" if \"GPU\" in devices else \"⚠ 未检测到Intel GPU\")" || echo "⚠ OpenVINO检测失败"\n\
echo "启动FaceFusion Web界面..."\n\
exec python3 facefusion.py run \\\n\
    --execution-providers openvino \\\n\
    --execution-device-id 0 \\\n\
    --ui-layouts default \\\n\
    --server-host 0.0.0.0 \\\n\
    --server-port 7860\n' > /app/start.sh && \
    chmod +x /app/start.sh

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:7860/ || exit 1

# 启动命令
CMD ["/app/start.sh"]